cmake_minimum_required(VERSION 3.13)

set(CMAKE_C_STANDARD 11)
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)


# Initialise pico_sdk from installed location
# (note this can come from environment, CMake cache etc)

# == DO NEVER EDIT THE NEXT LINES for Raspberry Pi Pico VS Code Extension to work ==
#if(WIN32)
 #  set(USERHOME $ENV{USERPROFILE})
#else()
 #   set(USERHOME $ENV{HOME})
#endif()
#set(PICO_SDK_PATH ${USERHOME}/.pico-sdk/sdk/1.5.1)
#set(PICO_TOOLCHAIN_PATH ${USERHOME}/.pico-sdk/toolchain/13_2_Rel1)
#if(WIN32)
 #   set(pico-sdk-tools_DIR ${USERHOME}/.pico-sdk/tools/1.5.1)
  #  include(${pico-sdk-tools_DIR}/pico-sdk-tools-config.cmake)
   # include(${pico-sdk-tools_DIR}/pico-sdk-tools-config-version.cmake)
#endif()
# ====================================================================================
set(PICO_BOARD pico CACHE STRING "Board type")

# Pull in Raspberry Pi Pico SDK (must be before project)
include(pico_sdk_import.cmake)

if (PICO_SDK_VERSION_STRING VERSION_LESS "1.4.0")
  message(FATAL_ERROR "Raspberry Pi Pico SDK version 1.4.0 (or later) required. Your version is ${PICO_SDK_VERSION_STRING}")
endif()

project(dev_hid_composite C CXX ASM)

# Initialise the Raspberry Pi Pico SDK
pico_sdk_init()

# Add executable. Default name is the project name, version 0.1

cmake_minimum_required(VERSION 3.13)

add_executable(dev_hid_composite)

target_sources(dev_hid_composite PUBLIC
        ${CMAKE_CURRENT_LIST_DIR}/main.c
        ${CMAKE_CURRENT_LIST_DIR}/usb_descriptors.c
        ${CMAKE_CURRENT_LIST_DIR}/imu_helpers.c
        )

# Make sure TinyUSB can find tusb_config.h
target_include_directories(dev_hid_composite PUBLIC
        ${CMAKE_CURRENT_LIST_DIR})

# In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_device
# for TinyUSB device support and tinyusb_board for the additional board support library used by the example
target_link_libraries(dev_hid_composite PUBLIC pico_stdlib hardware_i2c pico_unique_id tinyusb_device tinyusb_board)

# Uncomment this line to enable fix for Errata RP2040-E5 (the fix requires use of GPIO 15)
#target_compile_definitions(dev_hid_composite PUBLIC PICO_RP2040_USB_DEVICE_ENUMERATION_FIX=1)

pico_add_extra_outputs(dev_hid_composite)

#cmake_minimum_required(VERSION 3.12)

# Pull in SDK (must be before project)
#include(pico_sdk_import.cmake)

#project(hw13 C CXX ASM)
#set(CMAKE_C_STANDARD 11)
#set(CMAKE_CXX_STANDARD 17)

#set(hw13 ${PROJECT_SOURCE_DIR})

#Initialize the SDK
#pico_sdk_init()

# Add multi example
#add_subdirectory(main)

#set(TINYUSB_FAMILY_PROJECT_NAME_PREFIX "tinyusb_dev_")
#add_subdirectory(${PICO_TINYUSB_PATH}/examples/device tinyusb_device_examples)

#add_compile_options(-Wall
 #       -Wno-format          # int != int32_t as far as the compiler is concerned because gcc has int32_t as long int
  #      -Wno-unused-function # we have some for the docs that aren't called
   #     -Wno-maybe-uninitialized
        #)

#add_executable(main)

#target_sources(main PUBLIC
        #${CMAKE_CURRENT_LIST_DIR}/main.c
        #${CMAKE_CURRENT_LIST_DIR}/usb_descriptors.c
        #${CMAKE_CURRENT_LIST_DIR}/imu_helpers.c
        #)

## Make sure TinyUSB can find tusb_config.h
#target_include_directories(main PUBLIC
 #       ${CMAKE_CURRENT_LIST_DIR})

## In addition to pico_stdlib required for common PicoSDK functionality, add dependency on tinyusb_device
## for TinyUSB device support and tinyusb_board for the additional board support library used by the example
#target_link_libraries(main PUBLIC pico_stdlib pico_unique_id tinyusb_device tinyusb_board)

## Uncomment this line to enable fix for Errata RP2040-E5 (the fix requires use of GPIO 15)
##target_compile_definitions(dev_hid_composite PUBLIC PICO_RP2040_USB_DEVICE_ENUMERATION_FIX=1)

#pico_add_extra_outputs(main)

## add url via pico_set_program_url
#example_auto_set_url(main)



##OLD MAIN cmakelists:
#add_executable(main
 #       main.c
  #      imu_helpers.c
   #     usb_descriptors.c
        #)

# pull in common dependencies
#target_link_libraries(main pico_stdlib hardware_i2c tinyusb_device tinyusb_board)

# create map/bin/hex file etc.
#pico_add_extra_outputs(main)

#pico_enable_stdio_usb(main 1) 
#pico_enable_stdio_uart(main 0)

## add url via pico_set_program_url
#example_auto_set_url(blink)